# docker-compose.yml
version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: temp_monitor_backend
    ports:
      - "8000:8000"
    environment:
      - DEBUG=1
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,54.37.66.72,54.37.66.72:8000
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000,http://frontend:3000,http://temp_monitor_frontend:3000,http://localhost:8000,http://10.0.2.2:8000,http://localhost:19006,http://54.37.66.72:8000
      - CSRF_TRUSTED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000,http://frontend:3000,http://temp_monitor_frontend:3000,http://localhost:8000,http://10.0.2.2:8000,http://localhost:19006,http://54.37.66.72:8000
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend:/app
    networks:
      - temp_monitor_network
    command: >
      sh -c "pip install --no-cache-dir -r requirements.txt &&
             python manage.py collectstatic --noinput &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: temp_monitor_frontend
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://backend:8000/api
      - CHOKIDAR_USEPOLLING=true
      - NODE_ENV=development
      - VITE_NODE_ENV=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - temp_monitor_network

  db:
    image: postgres:14-alpine
    container_name: temp_monitor_db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
    networks:
      - temp_monitor_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M

networks:
  temp_monitor_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local